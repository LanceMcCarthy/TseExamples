{"version":3,"file":"kendo.imagebrowser.min.js","names":["factory","define","amd","$","undefined$1","kendo","window","FileBrowser","ui","isPlainObject","extend","isFunction","trimSlashesRegExp","ERROR","NS","NAMEFIELD","SIZEFIELD","TYPEFIELD","DEFAULTSORTORDER","field","dir","EMPTYTILE","template","sizeFormatter","value","suffix","Math","round","data","schemas","imagebrowser","items","model","id","fields","name","size","type","transports","RemoteTransport","init","options","fn","call","this","_call","path","read","create","destroy","update","ImageBrowser","element","addClass","fileTypes","that","selected","_selectedItem","imageUrl","transport","get","match","concatPaths","replace","format","encodeURIComponent","_fileUpload","e","file","filterRegExp","RegExp","split","join","fileName","files","fileSize","fileNameField","sizeField","test","_createFile","_uploading","upload","one","_insertFileToList","set","response","_getFieldName","_tiles","listView","filter","attr","_scroll","preventDefault","_showMessage","messages","invalidFileType","_content","list","appendTo","on","_dblClick","bind","ListView","layout","flex","direction","wrap","dataSource","_itemTmpl","editTemplate","_editTmpl","selectable","autoBind","dataBinding","toolbar","find","parent","action","progress","content","dataBound","view","length","append","text","emptyFolder","change","_listViewChange","_dataSource","typeSortOrder","nameSortOrder","sort","schema","_errorHandler","unbind","_error","DataSource","_loadImage","li","dataItem","getByUid","thumbnailUrl","img","alt","urlJoin","hide","prev","remove","end","fadeIn","after","indexOf","_override","Date","getTime","loaded","clearTimeout","_timeout","setTimeout","height","_outerHeight","viewTop","scrollTop","viewBottom","each","top","offsetTop","bottom","offsetHeight","html","plugin","jQuery"],"sources":["kendo.imagebrowser.js"],"mappings":"CAAA,SAAWA,GACW,mBAAXC,QAAyBA,OAAOC,IAAMD,OAAO,CAAC,yBAA0BD,GAC/EA,IAFJ,EAGG,YAUC,SAAUG,EAAGC,GACT,IAAIC,EAAQC,OAAOD,MACfE,EAAcF,EAAMG,GAAGD,YACvBE,EAAgBN,EAAEM,cAClBC,EAASP,EAAEO,OACXC,EAAaN,EAAMM,WACnBC,EAAoB,aACpBC,EAAQ,QACRC,EAAK,qBACLC,EAAY,OACZC,EAAY,OACZC,EAAY,OACZC,EAAmB,CAAEC,MAAOF,EAAWG,IAAK,OAC5CC,EAAYhB,EAAMiB,SAAS,0LA4E/B,SAASC,EAAcC,GACnB,IAAKA,EACD,MAAO,GAGX,IAAIC,EAAS,SAab,OAXID,GAAS,YACTC,EAAS,MACTD,GAAS,YACFA,GAAS,SAChBC,EAAS,MACTD,GAAS,SACFA,GAAS,OAChBC,EAAS,MACTD,GAAS,MAGNE,KAAKC,MAAc,IAARH,GAAe,IAAMC,EA5F3Cf,GAAO,EAAML,EAAMuB,KAAM,CACrBC,QAAS,CACLC,aAAgB,CACZF,KAAM,SAASA,GACX,OAAOA,EAAKG,OAASH,GAAQ,IAEjCI,MAAO,CACHC,GAAI,OACJC,OAAQ,CACJC,KAAM,OACNC,KAAM,OACNC,KAAM,aAO1B3B,GAAO,EAAML,EAAMuB,KAAM,CACrBU,WAAY,CACRR,aAAgBzB,EAAMuB,KAAKW,gBAAgB7B,OAAO,CAC9C8B,KAAM,SAASC,GACXpC,EAAMuB,KAAKW,gBAAgBG,GAAGF,KAAKG,KAAKC,KAAMzC,EAAEO,QAAO,EAAM,GAAIkC,KAAKH,QAASA,KAEnFI,MAAO,SAASR,EAAMI,GAClBA,EAAQb,KAAOzB,EAAEO,OAAO,GAAI+B,EAAQb,KAAM,CAAEkB,KAAMF,KAAKH,QAAQK,SAE3DnC,EAAWiC,KAAKH,QAAQJ,IACxBO,KAAKH,QAAQJ,GAAMM,KAAKC,KAAMH,GAE9BpC,EAAMuB,KAAKW,gBAAgBG,GAAGL,GAAMM,KAAKC,KAAMH,IAGvDM,KAAM,SAASN,GACXG,KAAKC,MAAM,OAAQJ,IAEvBO,OAAQ,SAASP,GACbG,KAAKC,MAAM,SAAUJ,IAEzBQ,QAAS,SAASR,GACdG,KAAKC,MAAM,UAAWJ,IAE1BS,OAAQ,aAGRT,QAAS,CACLM,KAAM,CACFV,KAAM,QAEVa,OAAQ,CACJb,KAAM,QAEVW,OAAQ,CACJX,KAAM,QAEVY,QAAS,CACLZ,KAAM,cAuC1B,IAAIc,EAAe5C,EAAYG,OAAO,CAClC8B,KAAM,SAASY,EAASX,GAGpBA,EAAUA,GAAW,GAErBlC,EAAYmC,GAAGF,KAAKG,KAJTC,KAIoBQ,EAASX,GAJ7BG,KAMNQ,QAAQC,SAAS,mBAG1BZ,QAAS,CACLN,KAAM,eACNmB,UAAW,4BAGf9B,MAAO,WACH,IAEIsB,EAFAS,EAAOX,KACPY,EAAWD,EAAKE,gBAEhBC,EAAWH,EAAKd,QAAQkB,UAAUD,SAEtC,GAAIF,GAAwC,MAA5BA,EAASI,IAAI3C,GAKzB,OAJA6B,EAnDZ,SAAqBA,EAAMX,GAIvB,OAHIW,IAAS1C,GAAgB0C,EAAKe,MAAM,SACpCf,GAAQA,GAAQ,IAAM,KAEnBA,EAAOX,EA+CC2B,CAAYP,EAAKT,OAAQU,EAASI,IAAI7C,IAAYgD,QAAQnD,EAAmB,IAChF8C,IACAZ,EAAOnC,EAAW+C,GAAYA,EAASZ,GAAQzC,EAAM2D,OAAON,EAAUO,mBAAmBnB,KAEtFA,GAIfoB,YAAa,SAASC,GAClB,IAQIC,EARAb,EAAOX,KACPH,EAAUc,EAAKd,QACfa,EAAYb,EAAQa,UACpBe,EAAe,IAAIC,QAAQ,IAAMhB,EAAUiB,MAAM,KAAKC,KAAK,OAAS,KAAKT,QAAQ,QAAU,OAAQ,KACnGU,EAAWN,EAAEO,MAAM,GAAGvC,KACtBwC,EAAWR,EAAEO,MAAM,GAAGtC,KACtBwC,EAAgB7D,EAChB8D,EAAY7D,EAGZqD,EAAaS,KAAKL,IAClBN,EAAEvC,KAAO,CAAEkB,KAAMS,EAAKT,SAEtBsB,EAAOb,EAAKwB,YAAYN,EAAUE,KAK9BP,EAAKY,YAAa,EAElBzB,EAAK0B,OAAOC,IAAI,SAAS,WACrBd,EAAOhE,KAGXmD,EAAK0B,OAAOC,IAAI,WAAW,SAASf,GAChC,GAAIC,EAAM,QACCA,EAAKY,WAEZ,IAAIhD,EAAQuB,EAAK4B,kBAAkBf,GAEnCpC,EAAMoD,IAAIR,EAAeT,EAAEkB,SAAS9B,EAAK+B,cAAcV,KACvD5C,EAAMoD,IAAIP,EAAWV,EAAEkB,SAAS9B,EAAK+B,cAAcT,KAEnDtB,EAAKgC,OAAShC,EAAKiC,SAASzD,QAAQ0D,OAAO,IAAMpF,EAAMqF,KAAK,QAAU,OACtEnC,EAAKoC,eAlBbxB,EAAEyB,mBAuBNzB,EAAEyB,iBACFrC,EAAKsC,aAAaxF,EAAM2D,OAAOvB,EAAQqD,SAASC,gBAAiBtB,EAAUnB,MAInF0C,SAAU,WACN,IAAIzC,EAAOX,KAEXW,EAAK0C,KAAO9F,EAAE,0CACT+F,SAAS3C,EAAKH,SACd+C,GAAG,WAAarF,EAAI,mBAAoByC,EAAK6C,UAAUC,KAAK9C,IAEjEA,EAAKiC,SAAW,IAAInF,EAAMG,GAAG8F,SAAS/C,EAAK0C,KAAM,CAC7CM,OAAQ,OACRC,KAAM,CACFC,UAAW,MACXC,KAAM,QAEVC,WAAYpD,EAAKoD,WACjBrF,SAAUiC,EAAKqD,YACfC,aAActD,EAAKuD,YACnBC,YAAY,EACZC,UAAU,EACVC,YAAa,SAAS9C,GAElBZ,EAAK2D,QAAQC,KAAK,cAAcC,SAAS/D,SAAS,cAEjC,WAAbc,EAAEkD,QAAoC,SAAblD,EAAEkD,SAC3BlD,EAAEyB,iBACFvF,EAAMG,GAAG8G,SAAS/D,EAAKiC,SAAS+B,SAAS,KAGjDC,UAAW,WACHjE,EAAKoD,WAAWc,OAAOC,QACvBnE,EAAKgC,OAAS3C,KAAKb,QAAQ0D,OAAO,IAAMpF,EAAMqF,KAAK,QAAU,OAC7DnC,EAAKoC,WAEL/C,KAAK2E,QAAQI,OAAOtG,EAAU,CAAEuG,KAAMrE,EAAKd,QAAQqD,SAAS+B,gBAGpEC,OAAQvE,EAAKwE,gBAAgB1B,KAAK9C,KAGtCA,EAAKiC,SAAS+B,QAAQpB,GAAG,SAAWrF,EAAIyC,EAAKoC,QAAQU,KAAK9C,KAG9DyE,YAAa,WACT,IAAIzE,EAAOX,KACPH,EAAUc,EAAKd,QACfkB,EAAYlB,EAAQkB,UACpBsE,EAAgBvH,EAAO,GAAIQ,GAC3BgH,EAAgB,CAAE/G,MAAOJ,EAAWK,IAAK,OAEzCuF,EAAa,CACTtE,KAAMsB,EAAUtB,MAAQ,eACxB8F,KAAM,CAACF,EAAeC,IAG1BzH,EAAckD,KACdA,EAAUb,KAAOS,EAAKT,KAAKuD,KAAK9C,GAChCoD,EAAWhD,UAAYA,GAGvBlD,EAAcgC,EAAQ2F,QACtBzB,EAAWyB,OAAS3F,EAAQ2F,OACrBzE,EAAUtB,MAAQ5B,EAAcJ,EAAMuB,KAAKC,QAAQ8B,EAAUtB,QAC3DhC,EAAMuB,KAAKC,QAAQ8B,EAAUtB,MAGtCkB,EAAKoD,YAAcpD,EAAK8E,cACxB9E,EAAKoD,WAAW2B,OAAOzH,EAAO0C,EAAK8E,eAEnC9E,EAAK8E,cAAgB9E,EAAKgF,OAAOlC,KAAK9C,GAG1CA,EAAKoD,WAAatG,EAAMuB,KAAK4G,WAAWxF,OAAO2D,GAC1CN,KAAKxF,EAAO0C,EAAK8E,gBAG1BI,WAAY,SAASC,GACjB,IAAInF,EAAOX,KACPQ,EAAUjD,EAAEuI,GACZC,EAAWpF,EAAKoD,WAAWiC,SAASxF,EAAQsC,KAAKrF,EAAMqF,KAAK,SAC5DvD,EAAOwG,EAAS/E,IAAI7C,GACpB8H,EAAetF,EAAKd,QAAQkB,UAAUkF,aACtCC,EAAM3I,EAAE,UAAW,CAAE4I,IAAK5G,IAC1B6G,EAAU,IAEVL,EAAS3D,aAIb8D,EAAIG,OACA9C,GAAG,OAASrF,GAAI,WACbX,EAAEyC,MAAMsG,OAAOC,SAASC,MAAM/F,SAAS,wBAAwBgG,YAGtEjG,EAAQ+D,KAAK,gBAAgBmC,MAAMR,GAE/BnI,EAAWkI,GACXA,EAAeA,EAAatF,EAAKT,OAAQmB,mBAAmB9B,KAExD0G,EAAaU,QAAQ,MAAQ,IAC7BP,EAAU,KAGdH,EAAeA,EAAeG,EAAU,QAAU/E,mBAAmBV,EAAKT,OAASX,GAC/EwG,EAASa,YACTX,GAAgB,OAAQ,IAAIY,MAAOC,iBAC5Bf,EAASa,YAMxBV,EAAIpD,KAAK,MAAOmD,GAEhBH,EAAGiB,QAAS,IAGhBhE,QAAS,WACL,IAAIpC,EAAOX,KACPW,EAAKd,QAAQkB,WAAaJ,EAAKd,QAAQkB,UAAUkF,eACjDe,aAAarG,EAAKsG,UAElBtG,EAAKsG,SAAWC,YAAW,WAEvB,IAAIC,EAAS1J,EAAM2J,aAAazG,EAAKiC,SAAS+B,SAC1C0C,EAAU1G,EAAKiC,SAAS+B,QAAQ2C,YAChCC,EAAaF,EAAUF,EAE3BxG,EAAKgC,OAAO6E,MAAK,WACb,IA3ODhH,EA2OKiH,GA3OLjH,EA2OqBR,MA1OrB0H,UAAYnK,EAAEiD,GAAS2G,SA2OlBQ,EAASF,EAAMzH,KAAK4H,aAMxB,IAJKH,GAAOJ,GAAWI,EAAMF,GAAgBI,GAAUN,GAAWM,EAASJ,IACvE5G,EAAKkF,WAAW7F,MAGhByH,EAAMF,EACN,OAAO,KAIf5G,EAAKgC,OAAShC,EAAKgC,OAAOE,QAAO,WAC7B,OAAQ7C,KAAK+G,YAGlB,OAIX/C,UAAW,WACP,IACI6D,EAAO,gCAAkCpK,EAAMqF,KAAK,OAAS,aAgBjE,OAdA+E,GAAQpK,EAAMqF,KAAK,QAAU,OAArBrF,UACRoK,GAAQ,uBACRA,GAAQ,wFACRA,GAAQ,WANG7H,KAOFH,QAAQkB,WAPNf,KAOwBH,QAAQkB,UAAUkF,aACjD4B,GAAQ,yFAERA,GAAQ,sFAEZA,GAAQ,MACRA,GAAQ,2CACRA,GAAQ,wFACRA,GAAQ,SAEDpK,EAAMiB,SAASmJ,GAAMpE,KAAK,CAAE9E,cAAeA,OAI1DlB,EAAMG,GAAGkK,OAAOvH,GAnWpB,CAoWG7C,OAAOD,MAAMsK","sourcesContent":["(function (factory) {\n    typeof define === 'function' && define.amd ? define(['kendo.filebrowser'], factory) :\n    factory();\n})((function () {\n    var __meta__ = {\n        id: \"imagebrowser\",\n        name: \"ImageBrowser\",\n        category: \"web\",\n        description: \"\",\n        hidden: true,\n        depends: [ \"filebrowser\" ]\n    };\n\n    (function($, undefined$1) {\n        var kendo = window.kendo,\n            FileBrowser = kendo.ui.FileBrowser,\n            isPlainObject = $.isPlainObject,\n            extend = $.extend,\n            isFunction = kendo.isFunction,\n            trimSlashesRegExp = /(^\\/|\\/$)/g,\n            ERROR = \"error\",\n            NS = \".kendoImageBrowser\",\n            NAMEFIELD = \"name\",\n            SIZEFIELD = \"size\",\n            TYPEFIELD = \"type\",\n            DEFAULTSORTORDER = { field: TYPEFIELD, dir: \"asc\" },\n            EMPTYTILE = kendo.template('<div class=\"k-listview-item k-listview-item-empty\"><span class=\"k-file-preview\"><span class=\"k-file-icon k-icon k-i-none\"></span></span><span class=\"k-file-name\">${text}</span></div>');\n\n        extend(true, kendo.data, {\n            schemas: {\n                \"imagebrowser\": {\n                    data: function(data) {\n                        return data.items || data || [];\n                    },\n                    model: {\n                        id: \"name\",\n                        fields: {\n                            name: \"name\",\n                            size: \"size\",\n                            type: \"type\"\n                        }\n                    }\n                }\n            }\n        });\n\n        extend(true, kendo.data, {\n            transports: {\n                \"imagebrowser\": kendo.data.RemoteTransport.extend({\n                    init: function(options) {\n                        kendo.data.RemoteTransport.fn.init.call(this, $.extend(true, {}, this.options, options));\n                    },\n                    _call: function(type, options) {\n                        options.data = $.extend({}, options.data, { path: this.options.path() });\n\n                        if (isFunction(this.options[type])) {\n                            this.options[type].call(this, options);\n                        } else {\n                            kendo.data.RemoteTransport.fn[type].call(this, options);\n                        }\n                    },\n                    read: function(options) {\n                        this._call(\"read\", options);\n                    },\n                    create: function(options) {\n                        this._call(\"create\", options);\n                    },\n                    destroy: function(options) {\n                        this._call(\"destroy\", options);\n                    },\n                    update: function() {\n                        //updates are handled by the upload\n                    },\n                    options: {\n                        read: {\n                            type: \"POST\"\n                        },\n                        update: {\n                            type: \"POST\"\n                        },\n                        create: {\n                            type: \"POST\"\n                        },\n                        destroy: {\n                            type: \"POST\"\n                        }\n                    }\n                })\n            }\n        });\n\n        function offsetTop(element) {\n            return element.offsetTop - $(element).height();\n        }\n\n        function concatPaths(path, name) {\n            if (path === undefined$1 || !path.match(/\\/$/)) {\n                path = (path || \"\") + \"/\";\n            }\n            return path + name;\n        }\n\n        function sizeFormatter(value) {\n            if (!value) {\n                return \"\";\n            }\n\n            var suffix = \" bytes\";\n\n            if (value >= 1073741824) {\n                suffix = \" GB\";\n                value /= 1073741824;\n            } else if (value >= 1048576) {\n                suffix = \" MB\";\n                value /= 1048576;\n            } else if (value >= 1024) {\n                suffix = \" KB\";\n                value /= 1024;\n            }\n\n            return Math.round(value * 100) / 100 + suffix;\n        }\n\n        var ImageBrowser = FileBrowser.extend({\n            init: function(element, options) {\n                var that = this;\n\n                options = options || {};\n\n                FileBrowser.fn.init.call(that, element, options);\n\n                that.element.addClass(\"k-imagebrowser\");\n            },\n\n            options: {\n                name: \"ImageBrowser\",\n                fileTypes: \"*.png,*.gif,*.jpg,*.jpeg\"\n            },\n\n            value: function() {\n                var that = this,\n                    selected = that._selectedItem(),\n                    path,\n                    imageUrl = that.options.transport.imageUrl;\n\n                if (selected && selected.get(TYPEFIELD) === \"f\") {\n                    path = concatPaths(that.path(), selected.get(NAMEFIELD)).replace(trimSlashesRegExp, \"\");\n                    if (imageUrl) {\n                        path = isFunction(imageUrl) ? imageUrl(path) : kendo.format(imageUrl, encodeURIComponent(path));\n                    }\n                    return path;\n                }\n            },\n\n            _fileUpload: function(e) {\n                var that = this,\n                    options = that.options,\n                    fileTypes = options.fileTypes,\n                    filterRegExp = new RegExp((\"(\" + fileTypes.split(\",\").join(\")|(\") + \")\").replace(/\\*\\./g , \".*.\"), \"i\"),\n                    fileName = e.files[0].name,\n                    fileSize = e.files[0].size,\n                    fileNameField = NAMEFIELD,\n                    sizeField = SIZEFIELD,\n                    file;\n\n                if (filterRegExp.test(fileName)) {\n                    e.data = { path: that.path() };\n\n                    file = that._createFile(fileName, fileSize);\n\n                    if (!file) {\n                        e.preventDefault();\n                    } else {\n                        file._uploading = true;\n\n                        that.upload.one(\"error\", function() {\n                            file = undefined$1;\n                        });\n\n                        that.upload.one(\"success\", function(e) {\n                            if (file) {\n                                delete file._uploading;\n\n                                var model = that._insertFileToList(file);\n\n                                model.set(fileNameField, e.response[that._getFieldName(fileNameField)]);\n                                model.set(sizeField, e.response[that._getFieldName(sizeField)]);\n\n                                that._tiles = that.listView.items().filter(\"[\" + kendo.attr(\"type\") + \"=f]\");\n                                that._scroll();\n                            }\n                        });\n                    }\n                } else {\n                    e.preventDefault();\n                    that._showMessage(kendo.format(options.messages.invalidFileType, fileName, fileTypes));\n                }\n            },\n\n            _content: function() {\n                var that = this;\n\n                that.list = $('<div class=\"k-filemanager-listview\" />')\n                    .appendTo(that.element)\n                    .on(\"dblclick\" + NS, \".k-listview-item\", that._dblClick.bind(that));\n\n                that.listView = new kendo.ui.ListView(that.list, {\n                    layout: \"flex\",\n                    flex: {\n                        direction: \"row\",\n                        wrap: \"wrap\"\n                    },\n                    dataSource: that.dataSource,\n                    template: that._itemTmpl(),\n                    editTemplate: that._editTmpl(),\n                    selectable: true,\n                    autoBind: false,\n                    dataBinding: function(e) {\n\n                        that.toolbar.find(\".k-i-close\").parent().addClass(\"k-disabled\");\n\n                        if (e.action === \"remove\" || e.action === \"sync\") {\n                            e.preventDefault();\n                            kendo.ui.progress(that.listView.content, false);\n                        }\n                    },\n                    dataBound: function() {\n                        if (that.dataSource.view().length) {\n                            that._tiles = this.items().filter(\"[\" + kendo.attr(\"type\") + \"=f]\");\n                            that._scroll();\n                        } else {\n                            this.content.append(EMPTYTILE({ text: that.options.messages.emptyFolder }));\n                        }\n                    },\n                    change: that._listViewChange.bind(that)\n                });\n\n                that.listView.content.on(\"scroll\" + NS, that._scroll.bind(that));\n            },\n\n            _dataSource: function() {\n                var that = this,\n                    options = that.options,\n                    transport = options.transport,\n                    typeSortOrder = extend({}, DEFAULTSORTORDER),\n                    nameSortOrder = { field: NAMEFIELD, dir: \"asc\" },\n                    schema,\n                    dataSource = {\n                        type: transport.type || \"imagebrowser\",\n                        sort: [typeSortOrder, nameSortOrder]\n                    };\n\n                if (isPlainObject(transport)) {\n                    transport.path = that.path.bind(that);\n                    dataSource.transport = transport;\n                }\n\n                if (isPlainObject(options.schema)) {\n                    dataSource.schema = options.schema;\n                } else if (transport.type && isPlainObject(kendo.data.schemas[transport.type])) {\n                    schema = kendo.data.schemas[transport.type];\n                }\n\n                if (that.dataSource && that._errorHandler) {\n                    that.dataSource.unbind(ERROR, that._errorHandler);\n                } else {\n                    that._errorHandler = that._error.bind(that);\n                }\n\n                that.dataSource = kendo.data.DataSource.create(dataSource)\n                    .bind(ERROR, that._errorHandler);\n            },\n\n            _loadImage: function(li) {\n                var that = this,\n                    element = $(li),\n                    dataItem = that.dataSource.getByUid(element.attr(kendo.attr(\"uid\"))),\n                    name = dataItem.get(NAMEFIELD),\n                    thumbnailUrl = that.options.transport.thumbnailUrl,\n                    img = $(\"<img />\", { alt: name }),\n                    urlJoin = \"?\";\n\n                if (dataItem._uploading) {\n                    return;\n                }\n\n                img.hide()\n                   .on(\"load\" + NS, function() {\n                       $(this).prev().remove().end().addClass(\"k-image k-file-image\").fadeIn();\n                   });\n\n                element.find(\".k-i-loading\").after(img);\n\n                if (isFunction(thumbnailUrl)) {\n                    thumbnailUrl = thumbnailUrl(that.path(), encodeURIComponent(name));\n                } else {\n                    if (thumbnailUrl.indexOf(\"?\") >= 0) {\n                        urlJoin = \"&\";\n                    }\n\n                    thumbnailUrl = thumbnailUrl + urlJoin + \"path=\" + encodeURIComponent(that.path() + name);\n                    if (dataItem._override) {\n                        thumbnailUrl += \"&_=\" + new Date().getTime();\n                        delete dataItem._override;\n                    }\n                }\n\n                // IE8 will trigger the load event immediately when the src is assigned\n                // if the image is loaded from the cache\n                img.attr(\"src\", thumbnailUrl);\n\n                li.loaded = true;\n            },\n\n            _scroll: function() {\n                var that = this;\n                if (that.options.transport && that.options.transport.thumbnailUrl) {\n                    clearTimeout(that._timeout);\n\n                    that._timeout = setTimeout(function() {\n\n                        var height = kendo._outerHeight(that.listView.content),\n                            viewTop = that.listView.content.scrollTop(),\n                            viewBottom = viewTop + height;\n\n                        that._tiles.each(function() {\n                            var top = offsetTop(this),\n                                bottom = top + this.offsetHeight;\n\n                            if ((top >= viewTop && top < viewBottom) || (bottom >= viewTop && bottom < viewBottom)) {\n                                that._loadImage(this);\n                            }\n\n                            if (top > viewBottom) {\n                                return false;\n                            }\n                        });\n\n                        that._tiles = that._tiles.filter(function() {\n                            return !this.loaded;\n                        });\n\n                    }, 250);\n                }\n            },\n\n            _itemTmpl: function() {\n                var that = this,\n                    html = '<div class=\"k-listview-item\" ' + kendo.attr(\"uid\") + '=\"#=uid#\" ';\n\n                html += kendo.attr(\"type\") + '=\"${' + TYPEFIELD + '}\">';\n                html += '#if(' + TYPEFIELD + ' == \"d\") { #';\n                html += '<div class=\"k-file-preview\"><span class=\"k-file-icon k-icon k-i-folder\"></span></div>';\n                html += \"#}else{#\";\n                if (that.options.transport && that.options.transport.thumbnailUrl) {\n                    html += '<div class=\"k-file-preview\"><span class=\"k-file-icon k-icon k-i-loading\"></span></div>';\n                } else {\n                    html += '<div class=\"k-file-preview\"><span class=\"k-file-icon k-icon k-i-file\"></span></div>';\n                }\n                html += \"#}#\";\n                html += '<span class=\"k-file-name\">${' + NAMEFIELD + '}</span>';\n                html += '#if(' + TYPEFIELD + ' == \"f\") { # <span class=\"k-file-size\">${this.sizeFormatter(' + SIZEFIELD + ')}</span> #}#';\n                html += '</div>';\n\n                return kendo.template(html).bind({ sizeFormatter: sizeFormatter });\n            }\n        });\n\n        kendo.ui.plugin(ImageBrowser);\n    })(window.kendo.jQuery);\n\n}));\n"]}